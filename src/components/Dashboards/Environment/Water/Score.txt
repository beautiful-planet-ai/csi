   const totalValues_Year_Month = filteredData_Year_Month.reduce(
          (acc, curr) => {
            return {
              ...acc,
              Current_Supply_MLD:
                (acc.Current_Supply_MLD || 0) + curr.Current_Supply_MLD,
              Required_Supply_MLD:
                (acc.Required_Supply_MLD || 0) + curr.Required_Supply_MLD,
              Population: (acc.Population || 0) + curr.Population,
              Awarness_Campaigns_Programs:
                (acc.Awarness_Campaigns_Programs || 0) +
                curr.Awarness_Campaigns_Programs,
              Borewell: (acc.Borewell || 0) + curr.Borewell,
              Canals: (acc.Canals || 0) + curr.Canals,
              Handpumps: (acc.Handpumps || 0) + curr.Handpumps,
              No_of_Households_with_Connections:
                (acc.No_of_Households_with_Connections || 0) +
                curr.No_of_Households_with_Connections,
              Total_Households:
                (acc.Total_Households || 0) + curr.Total_Households,
              Tanks: (acc.Tanks || 0) + curr.Tanks,
              Ponds: (acc.Ponds || 0) + curr.Ponds,
              No_of_Households_with_Meters:
                (acc.No_of_Households_with_Meters || 0) +
                curr.No_of_Households_with_Meters,
              Sites_with_Rainwater_Harvesting_System:
                (acc.Sites_with_Rainwater_Harvesting_System || 0) +
                curr.Sites_with_Rainwater_Harvesting_System,
              Total_Volume_Harvested:
                (acc.Total_Volume_Harvested || 0) + curr.Total_Volume_Harvested,
              Households_Bill_Payment:
                (acc.Households_Bill_Payment || 0) +
                curr.Households_Bill_Payment,
              WQI: (acc.WQI || 0) + curr.WQI,
            };
          },
          {}
        ); 
 
 
 // Supply Score Calculation Start-----------------------------------------------------------
        const calculateScoreWaterConnection = (percentage) => {
          if (percentage <= 0) return 0;
          if (percentage > 0 && percentage < 25) return 20;
          if (percentage >= 25 && percentage < 50) return 40;
          if (percentage >= 50 && percentage < 75) return 60;
          if (percentage >= 75 && percentage < 95) return 80;
          return 100;
        };
        const calculateScorePerCapita = (percentage) => {
          if (percentage < 0) return 0;
          if (percentage >= 0 && percentage < 50) return 0;
          if (percentage >= 50 && percentage < 75) return 10;
          if (percentage >= 75 && percentage < 95) return 30;
          return 50;
        };
        const waterConnectionPer = (
          (totalValues_Year_Month.No_of_Households_with_Connections /
            totalValues_Year_Month.Total_Households) *
          100
        ).toFixed(2);

        const waterSupplyPerCapitaPer =
          ((totalValues_Year_Month.Current_Supply_MLD * 1000000) /
            totalValues_Year_Month.Population /
            135) *
          100;
        const waterConnectionScore =
          calculateScoreWaterConnection(waterConnectionPer);
        const waterSupplyPerCapitaScore = calculateScorePerCapita(
          waterSupplyPerCapitaPer
        );
        const supplyScore =
          (waterConnectionScore + waterSupplyPerCapitaScore) / 2;
        // Supply Score Calculation End-----------------------------------------------------------------------------
        //  WQI Score Calculation Start----------------------------------------------
        const calculateScoreWQI = (wqi) => {
          if (wqi >= 0 && wqi < 25) return 0;
          if (wqi >= 25 && wqi < 50) return 25;
          if (wqi >= 50 && wqi < 75) return 50;
          if (wqi >= 70 && wqi < 90) return 75;
          return 100;
        };

        const avgWQI =
          totalValues_Year_Month.WQI / filteredData_Year_Month.length;

        const wqiScore = calculateScoreWQI(avgWQI);
        // WQI Score Calculation End----------------------------------------------------------------------
        // Water Usage Management Start------------------------------------------
        const calculateScorePerWaterMeters = (percentage) => {
          if (percentage <= 0) return 0;
          if (percentage > 0 && percentage < 10) return 10;
          if (percentage >= 10 && percentage < 30) return 20;
          if (percentage >= 30 && percentage < 50) return 35;
          return 50;
        };
        const perWaterMeters =
          (totalValues_Year_Month.No_of_Households_with_Meters /
            totalValues_Year_Month.No_of_Households_with_Connections) *
          100;
        const meterScore = calculateScorePerWaterMeters(perWaterMeters);
        const calculateScoreBillPayment = (rate) => {
          if (rate <= 0) return 0;
          if (rate > 0 && rate < 25) return 10;
          if (rate >= 25 && rate < 50) return 20;
          if (rate >= 50 && rate < 75) return 30;
          if (rate >= 75 && rate < 100) return 40;
          return 50;
        };
        const bill_payment =
          (totalValues_Year_Month.Households_Bill_Payment /
            totalValues_Year_Month.No_of_Households_with_Meters) *
          100;
        const billScore = calculateScoreBillPayment(bill_payment);
        const usageScore = (meterScore + billScore) / 2;
        //  Water Usage Management End-------------------------------------------
        const finalScore =
          supplyScore * 0.5 + wqiScore * 0.2 + usageScore * 0.3;
        setWaterScore(finalScore);